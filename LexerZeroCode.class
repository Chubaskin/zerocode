<?php

/** **/ 
/** **/ 
require_once('LexerZero.class');
 
class LexerZeroCode extends LexerZero {
	
    const NIL 			= 0;
    const TABLA     	= 1;
    const TEXTO     	= 2;
    const ENTERO    	= 3;
    const FLOTANTE    	= 4;
    
    static $tokenNamesCmd = array( "nil", 
								"TABLA", "TEXTO", 
								"ENTERO");

   
   
 
    
	/** **/ 
    public function isAscii() {
        return ord($this->c) >= 33 && ord($this->c) <= 126;
        // return is_numeric($this->c);
    }
 
    /** **/ 
    public function nextToken() {
		// echo "_".$this->c."_";
        while ( $this->c != self::EOF ) {
            switch ( $this->c ) {
                case ' ' :  case '\t': case '\n':  case '\r': 	
							$this->getSpace();
							if ($this->__flagSpaces) 
								return new TokenZero(self::SPACE, " ");
							else
								continue;								
                case ',' : $this->getNextChar();
                           return new TokenZero(self::COMMA, ",");
                case ';' : $this->getNextChar();
                           return new TokenZero(self::PCOMMA, ";");
                case '[' : $this->getNextChar();
                           return new TokenZero(self::LBRACK, "[");
                case ']' : $this->getNextChar();
                           return new TokenZero(self::RBRACK, "]");
                case '(' : $this->getNextChar();
                           return new TokenZero(self::LPARENTESIS, "(");
                case ')' : $this->getNextChar();
                           return new TokenZero(self::RPARENTESIS, ")");
                           
                default:
                    if ($this->isLetter() ) return $this->isValidName();
                    if ($this->isLetter() ) return $this->isName();
                    if ($this->isNumber() ) return $this->isNum();
                    if ($this->isAscii() )  return new TokenZero(self::INVALIDO, "_");
                    if (ctype_space($this->c)) {
						$this->getSpace();
						if ($this->__flagSpaces) 
							return new TokenZero(self::SPACE, " ");
					} else { 
						echo "Caracter invalido :".ctype_space($this->c).":";
						throw new Exception("Caracter invalido: " + $this->c);
					} // endif
            }
        }
        return new TokenZero(self::EOF_TYPE,"<EOF>");
    }
 
    /** NAME is sequence of >=1 letter */
    public function isNum() {
        $buf = '';
        do {
            $buf .= $this->c;
            $this->getNextChar();
        } while ($this->isNumber());
 
        return new TokenZero(self::NUMERO, $buf);
    }
 
 
    /** NAME is sequence of >=1 letter */
    public function isName() {
        $buf = '';
        do {
            $buf .= $this->c;
            $this->getNextChar();
        } while ($this->isLetter());
 
        return new TokenZero(self::NAME, $buf);
    }
 
    /** isValidName : is sequence of >=1 letter or numbers */
    public function isValidName() {
        $buf = '';
        do {
            $buf .= $this->c;
            $this->getNextChar();
        } while ($this->isLetter()||($this->isNumber()));
        $t =new TokenZero(self::VARIABLE, $buf);
        if ( $t->isValidCmd() ) {
			$t->setType(self::COMANDO);
		}
		
		return $t;
    }
 
    /** ignoramos los espacios */
    public function getSpace() {
		$cc=0;		
        while(ctype_space($this->c)) {
            $this->getNextChar();
            $cc++; 
        }  // wend
        return $cc;
    }
}
 
?>
